/**
 * text-mine-api
 * text-mine
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@angular/core';
import { Http, Headers, URLSearchParams } from '@angular/http';
import { RequestMethod, RequestOptions, RequestOptionsArgs } from '@angular/http';
import { Response, ResponseContentType } from '@angular/http';

import { Observable } from 'rxjs/Observable';
import 'rxjs/add/operator/map';

import * as models from '../model/models';
import { BASE_PATH, COLLECTION_FORMATS } from '../variables';
import { Configuration } from '../configuration';


@Injectable()
export class PersonsApi {

    protected basePath = 'http://localhost:8080';
    public defaultHeaders: Headers = new Headers();
    public configuration: Configuration = new Configuration();

    constructor(protected http: Http, @Optional() @Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
        }
    }

    /**
     *
     * @summary Check if person exists
     * @param name Person name
     */
    public exists(name: string, extraHttpRequestParams?: any): Observable<boolean> {
        return this.existsWithHttpInfo(name, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     *
     * @summary Get lines in connection with a Person
     * @param person Person name
     * @param documentId Document id
     * @param sectionSerial Section number
     */
    public lineQuery(person: string, documentId?: string, sectionSerial?: number, extraHttpRequestParams?: any): Observable<models.LineHits> {
        return this.lineQueryWithHttpInfo(person, documentId, sectionSerial, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     *
     * @summary Get pages in connection with a Person
     * @param documentId Document id
     * @param person Person name
     */
    public pagesQuery(documentId: string, person: string, extraHttpRequestParams?: any): Observable<Array<models.Section>> {
        return this.pagesQueryWithHttpInfo(documentId, person, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     *
     * @summary Get sections in connection with a Person
     * @param person Person name
     * @param documentId Document id
     */
    public sectionQuery(person: string, documentId?: string, extraHttpRequestParams?: any): Observable<models.SectionHits> {
        return this.sectionQueryWithHttpInfo(person, documentId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }


    /**
     * Check if person exists
     *
     * @param name Person name
     */
    public existsWithHttpInfo(name: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/persons/exists';

        const queryParameters = new URLSearchParams();
        const headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'name' is not null or undefined
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling exists.');
        }
        if (name !== undefined) {
            queryParameters.set('name', <any>name);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        // to determine the Accept header
        const produces: string[] = [
            'application/json;charset=UTF-8'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Get lines in connection with a Person
     *
     * @param person Person name
     * @param documentId Document id
     * @param sectionSerial Section number
     */
    public lineQueryWithHttpInfo(person: string, documentId?: string, sectionSerial?: number, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/persons/lines';

        const queryParameters = new URLSearchParams();
        const headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'person' is not null or undefined
        if (person === null || person === undefined) {
            throw new Error('Required parameter person was null or undefined when calling lineQuery.');
        }
        if (documentId !== undefined) {
            queryParameters.set('documentId', <any>documentId);
        }

        if (sectionSerial !== undefined) {
            queryParameters.set('sectionSerial', <any>sectionSerial);
        }

        if (person !== undefined) {
            queryParameters.set('person', <any>person);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        // to determine the Accept header
        const produces: string[] = [
            'application/json;charset=UTF-8'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Get pages in connection with a Person
     *
     * @param documentId Document id
     * @param person Person name
     */
    public pagesQueryWithHttpInfo(documentId: string, person: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/persons/pages';

        const queryParameters = new URLSearchParams();
        const headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'documentId' is not null or undefined
        if (documentId === null || documentId === undefined) {
            throw new Error('Required parameter documentId was null or undefined when calling pagesQuery.');
        }
        // verify required parameter 'person' is not null or undefined
        if (person === null || person === undefined) {
            throw new Error('Required parameter person was null or undefined when calling pagesQuery.');
        }
        if (documentId !== undefined) {
            queryParameters.set('documentId', <any>documentId);
        }

        if (person !== undefined) {
            queryParameters.set('person', <any>person);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        // to determine the Accept header
        const produces: string[] = [
            'application/json;charset=UTF-8'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Get sections in connection with a Person
     *
     * @param person Person name
     * @param documentId Document id
     */
    public sectionQueryWithHttpInfo(person: string, documentId?: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/persons/sections';

        const queryParameters = new URLSearchParams();
        const headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'person' is not null or undefined
        if (person === null || person === undefined) {
            throw new Error('Required parameter person was null or undefined when calling sectionQuery.');
        }
        if (documentId !== undefined) {
            queryParameters.set('documentId', <any>documentId);
        }

        if (person !== undefined) {
            queryParameters.set('person', <any>person);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        // to determine the Accept header
        const produces: string[] = [
            'application/json;charset=UTF-8'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

}
